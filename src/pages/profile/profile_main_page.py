import time
import streamlit as st

from PIL import Image
from streamlit_cookies_controller import CookieController

from pages.profile.schemas import SUpdateUser
from src.utils.config import settings
from src.utils.get_profile import get_user_profile
from src.utils.send_confirm_email import send_confirm_email
from src.utils.update_profile import update_user_profile
from src.utils.get_scoreboard import get_scoreboard
from src.utils.get_week_dates import get_week_dates
from src.utils.update_user import update_user
from utils.authentificate_user import authentificate_user
from utils.deactivate_user import deactivate_user


class ProfilePage:
    def __init__(self, st: st, cookie_manager: CookieController) -> None:
        self.st = st
        self.cookie_manager = cookie_manager
        self.markdown()
        pass

    def markdown(self):
        # self.st.markdown(
        #     '''
        #         <style>
        #         .st-emotion-cache-r421ms {
        #             background-color: rgba(220, 220, 220, 0.3);
        #         }
        #         </style>
        #     ''',
        #     unsafe_allow_html=True
        # )
        user = get_user_profile(self.cookie_manager.get("user_access"))

        self.st.header("–ü—Ä–æ—Ñ–∏–ª—å")

        tab1, tab2 = st.tabs(["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"])

        with tab1:
            if user["profile_pic"]:
                self.st.image(
                    f"{settings.API_URL}/image/{user['profile_pic']}",
                    width=128
                )
            else:
                self.st.image(
                    f"{settings.API_URL}/image/profile_pic_default.jpeg",
                    width=128
                )
            self.st.header(f"{user['first_name']} {user['last_name']}")
            self.st.subheader(f"‚Äú{user["status"]}‚Äú")
            self.st.write(f"**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {user["id"]}")
            self.st.write(f"**–õ–æ–≥–∏–Ω:** {user["login"]}")
            email_verified = ":red[–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω]"
            if user["is_verified"]:
                email_verified = ":green[–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω]"
            self.st.write(f"**Email:** {user["email"]} ({email_verified})")
            if user["is_verified"] is False:
                if self.st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Email"):
                    send_confirm_email(self.cookie_manager.get("user_access"))
                    self.st.toast(
                        ":blue[–°—Å—ã–ª–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"
                        " –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –í–∞–º –Ω–∞ –ø–æ—á—Ç—É]",
                        icon="‚Ñπ"
                    )

            with self.st.container(border=True):
                self.st.subheader("–°–≤–æ–¥–∫–∞")
                col1m, col2m = self.st.columns(2)
                with col1m.container(border=True):
                    col1, col2 = self.st.columns(2)
                    with col1.container(border=True):
                        self.st.subheader("–£—Ä–æ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æüìö")
                        self.st.write(f"**{user["task_completed"]}**")
                    with col2.container(border=True):
                        self.st.subheader("–û—á–∫–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ‚≠êÔ∏è")
                        self.st.write(f"**{user["points"]}**")

                with col2m.container(border=True):
                    col1, col2 = self.st.columns(2)

                    main_scoreboard = get_scoreboard(
                        token=self.cookie_manager.get("user_access"),
                        start_date=None,
                        end_date=None
                    )
                    if not main_scoreboard:
                        main_scoreboard = "-"
                    else:
                        main_scoreboard = main_scoreboard["position"]

                    start_date, end_date = get_week_dates()
                    week_scoreboard = get_scoreboard(
                        token=self.cookie_manager.get("user_access"),
                        start_date=str(start_date),
                        end_date=str(end_date)
                    )
                    if not week_scoreboard:
                        week_scoreboard = "-"
                    else:
                        week_scoreboard = week_scoreboard["position"]

                    with col1.container(border=True):
                        self.st.subheader("–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µüìà")
                        self.st.write(f"**‚Ññ {main_scoreboard}**")
                    with col2.container(border=True):
                        self.st.subheader("–ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥üìà")
                        self.st.write(f"**‚Ññ {week_scoreboard}**")

        with tab2:
            with self.st.container(border=True):
                self.st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
                col1, col2 = self.st.columns(2)

                image = None

                try:
                    image_view = col1.empty()

                    image_view.image(
                        f"{settings.API_URL}/image/profile_pic_default.jpeg",
                        width=150
                    )
                except Exception:
                    col1.text("–ö–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ü§î")

                profile_pic = col2.file_uploader(
                    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è",
                    type=["png", "jpg", "jpeg"],
                )
                col2.text(
                    "–°–∞–º—ã–π –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 150x150 px."
                )

                first_name = self.st.text_input(
                    "–ò–º—è *", value=user["first_name"])
                last_name = self.st.text_input(
                    "–§–∞–º–∏–ª–∏—è *",  value=user["last_name"])
                status = self.st.text_area(
                    "–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è", max_chars=200,  value=user["status"])

                self.st.text("* –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")

                submit_btn = self.st.button("–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")

                if profile_pic:
                    image = Image.open(profile_pic).resize(
                        (150, 150)
                    )
                    image_view.image(
                        image,
                        width=150
                    )

                if submit_btn:
                    update_user_profile(
                        self.st,
                        self.cookie_manager,
                        first_name.replace(" ", ""),
                        last_name.replace(" ", ""),
                        status,
                        profile_pic
                    )

            with self.st.container(border=True):
                self.st.subheader("–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")

                old_pass = self.st.text_input(
                    "–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å", type="password")
                new_pass = self.st.text_input(
                    "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
                retry_new_pass = self.st.text_input(
                    "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")

                if self.st.button("–û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å"):
                    if new_pass == retry_new_pass:
                        try:
                            update_user(
                                st=self.st,
                                cookie_manager=self.cookie_manager,
                                login_data=user["login"],
                                password=old_pass,
                                data=SUpdateUser(password=new_pass)
                            )
                        except Exception:
                            self.st.toast(
                                ":red[–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤]",
                                icon="‚ùå"
                            )
                    else:
                        self.st.toast(
                            ":red[–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç]",
                            icon="‚ùå"
                        )
            with self.st.container(border=True):
                self.st.subheader("–°–º–µ–Ω–∏—Ç—å Email")

                old_pass = self.st.text_input(
                    "–ü–∞—Ä–æ–ª—å", type="password")
                email = self.st.text_input(
                    "–ù–æ–≤—ã–π Email")

                if self.st.button("–ò–∑–º–µ–Ω–∏—Ç—å Email"):
                    try:
                        update_user(
                            st=self.st,
                            cookie_manager=self.cookie_manager,
                            login_data=user["login"],
                            password=old_pass,
                            data=SUpdateUser(email=email)
                        )
                    except Exception:
                        self.st.toast(
                            ":red[–í—ã –≤–≤–µ–ª–∏ –Ω–µ Email]",
                            icon="‚ùå"
                        )

            with self.st.container(border=True):
                self.st.subheader(":red[–î–µ–∫–∞—Ç–∏–≤–∞—Ü–∏—è —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏]")

                password = self.st.text_input(
                    "–ü–∞—Äo–ª—å", type="password"
                )

                control_phrase = self.st.text_input(
                    "–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É: ‚Äú:red[–î–∞, —è —Ö–æ—á—É –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
                    " —Å–≤–æ—é —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å]‚Äú"
                )

                if self.st.button(":red[–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å]"):
                    if control_phrase == "–î–∞, —è —Ö–æ—á—É" \
                            " –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å":
                        response = authentificate_user(user["login"], password)
                        if response.status_code == 200:
                            if deactivate_user(
                                    self.cookie_manager.get("user_access")):
                                self.st.toast(
                                    ":blue[–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è"
                                    " –∑–∞–ø–∏—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞]",
                                    icon="‚Ñπ"
                                )
                                time.sleep(2)
                                self.st.rerun()
                        else:
                            self.st.toast(
                                ":red[–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ]",
                                icon="‚ùå"
                            )
                    else:
                        self.st.toast(
                            ":red[–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ]",
                            icon="‚ùå"
                        )
